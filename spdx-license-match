#!/bin/sh
SELF=`basename $0`
BINDIR=`readlink -m $0`
BINDIR=`dirname $BINDIR`
LICENSE_DIR=$BINDIR/license-list-data/template
LICENSE_TEXT_DIR=$BINDIR/license-list-data/text

# input file to match against the license database
opt_input=
# user guess for license
opt_guess=
# number of output matches
opt_num=1
# short mode
opt_short=

# color for added lines (green)
diffnew=`tput setaf 2`
# color for removed lines (red)
diffold=`tput setaf 1`
# color for hunk lines
diffhunk=`tput setaf 6`
# reset - original pair, unset all attributes
reset=`tput sgr0`

tmpdir=`mktemp -d --tmpdir spdx.XXXXX`
trap "rm -rf $tmpdir" EXIT

usage() {
	echo "Usage: $SELF [options] [--] [input]"
	echo
	echo "  input            file to match against the SPDX license database,"
	echo "                   empty or - to read from stdin"
	echo "  -h, --help       show this help text"
	echo "  -g, --guess      try only licenses containing this guess in title,"
	echo "                   e.g. --guess bsd"
	echo "  -m, --nocolor    don't colorize diff output"
	echo "  -n, --num N      output up to N license matches [default: 1]"
	echo "  -s, --short      don't print a diff output, only the match lines"
}

parse_opts() {
	while [ -n "$1" ]; do
		case "$1" in
			-h|--help)
				shift
				usage
				exit
				;;
			-g|--guess)
				shift
				opt_guess="$1"
				shift
				if [ -z "$opt_guess" ]; then
					echo "$SELF: --guess needs an additional argument"
					exit 1
				fi
				;;
			-m|--nocolor)
				shift
				diffold=
				diffnew=
				diffhunk=
				reset=
				;;
			-n|--num)
				shift
				opt_num="$1"
				shift
				case "$opt_num" in
					[0-9]*)
						;;
					*)
						echo "$SELF: --num needs an additional numeric argument"
						exit 1
						;;
				esac
				;;
			-s|--short)
				shift
				opt_short=yes
				;;
			--)
				shift
				;;
			*)
				opt_input="$1"
				shift
				case "$opt_input" in
					-)
						;;
					-*)
						echo "Unknown parameter: $1"
						exit 1
						;;
					*)
						;;
					esac
				;;
		esac
	done

	if [ -z "$opt_input" ]; then
		opt_input="-"
	elif [ ! "$opt_input" = "-" -a ! -r "$opt_input" ]; then
		echo "$SELF: unable to read from input file"
		exit 1
	fi
}

# join paragraphs, but leave diff lines in peace
# also take care of \r vs \n line ending. adding more lines here is okay, we
# ignore whitespace in diff anyways.
join_paragraphs() {
	tr '\r' '\n' \
	| awk '
		END              { if(para!="") print para }
		/^\s+?$/         { print para; para=""; print; next }
		/^@@.*@@$/       { print para; para=""; print; next }
		                 { if(para=="") para=$0; else para=para " " $0 }
	'
}

remove_comment_markers() {
	# remove C and shell style comment markers at beginning of lines
	sed -e 's/^\/\*\*\?//; s/^[[:space:]]\+\?\*\/\?//; s/^#//'
}

word_diff_output() {
	diff -wu $1 $2 \
	| grep -v '^\\ No newline at end of file' \
	| wdiff -d
}

calc_match() {
	license_file=`basename $1 .template.txt`
	# removing the %s makes integering easier. we re-add them later.
	common_lines=`wdiff --statistics $2 "${LICENSE_TEXT_DIR}/${license_file}.txt" | tail -n1 | awk '{ gsub("%", ""); print $5 }'`
	echo $common_lines $license_file
}

report_matches() {
	sort -n | tail -n $opt_num \
	| while read match license; do
		echo Match: $match% $license

		if [ "$match" -lt 50 ]; then
			echo "Note: match for $license is pretty bad. Maybe try a better --guess."
		fi

		if [ -n "$opt_short" ]; then
			continue;
		elif [ "$match" = 100 ]; then
			echo "Diff: files are identical"
			continue
		fi

		# rewrap to 80 columns for shorter diff
		# some SPDX licenses have Mac line ending, join_paragraphs takes care of that.
		# The sed takes care to reformat SPDX placeholder expressions for better
		# wdiffability.
		join_paragraphs < $LICENSE_DIR/$license.template.txt \
		| sed 's/\(original=\)\([^; ]\+\)/\1 \2/g; s/;match=/ \0/g' \
		| fold -w 78 -s \
		> "$tmpdir/$license.txt"

		echo Diff:
		# remove diff header, add fake one, and rewrap for better readability.
		# add syntax highlighting only after folding, or else fold will count ANSI
		# escapes as part of the words and the paragraphs looks jagged when the
		# escapes are swallowed by the tty.
		echo "  $diffold--- $license.txt$reset"
		echo "  $diffnew+++ input$reset"
		word_diff_output $tmpdir/$license.txt "$1" \
		| tail -n +2 \
		| join_paragraphs \
		| fold -s \
		| awk '
			/^@@(.*)@@$/ { print "  '$diffhunk'" $0 "'$reset'"; next }
			             {
			               gsub("\\{\\+", "'$diffnew'{+");
			               gsub("\\[-",   "'$diffold'[-");
			               gsub("\\+\\}", "+}'$reset'");
			               gsub("-\\]",   "-]'$reset'");
			               print "  " $0
			             }
			'
	done
}

main() {
	parse_opts "$@"

	# preprocessing: rewrap to 80 columns for better readability
	if [ "$opt_input" = "-" ]; then
		remove_comment_markers \
		| join_paragraphs \
		| fold -w 78 -s \
		> "$tmpdir/input"
	else
		join_paragraphs < $opt_input \
		| fold -w 78 -s \
		> "$tmpdir/input"
	fi

	# matching
	if [ -n "$opt_guess" ]; then
		find_guess="-iname *$opt_guess*.template.txt"
	fi
	find $LICENSE_DIR -maxdepth 1 -type f -iname '*.template.txt' $find_guess \
	| while read license; do
		calc_match "$license" "$tmpdir/input"
	done | report_matches "$tmpdir/input"
}

main "$@"

# vim: ft=sh noet ts=2 sw=2
